name: CPP-COSO - RELEASE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: 
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  BOOST_VERSION: 1.78.0
  APPLICATION_VERSION: 0.1.0
  APPLICATION_NAME: cpp-coso

permissions: write-all

jobs:
 sonarcloud-analyse:
    env:
      BUILD_TYPE: Debug
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Install dependencies
      run: sudo apt-get install -y clang-tidy cppcheck

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/reports; 

    - name: Lint Cpp Check
      run: cppcheck --enable=all --inconclusive --language=c++ --std=c++20 --xml --output-file=${{github.workspace}}/reports/cppcheck_report.xml ${{github.workspace}}

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}

    - name: Generate target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Lint Clang-Tidy
      run: clang-tidy -checks='*,-modernize-use-trailing-return-type,-llvm-header-guard,-fuchsia-default-arguments-calls' -header-filter='src/.*' -p bin **/*.*pp > ${{github.workspace}}/reports/clang_tidy_report.txt

    - name: Convert Lint Clang-Tidy to sonarqube format
      working-directory: ${{github.workspace}}/bin
      run: ./cpp-coso clang-tidy ${{github.workspace}}/reports/clang_tidy_report.txt ${{github.workspace}}/reports/clang-tidy-sonarqube-report.json
      
    - name: Convert Lint Cpp Check to sonarqube format
      working-directory: ${{github.workspace}}/bin
      run: ./cpp-coso cppcheck ${{github.workspace}}/reports/cppcheck_report.xml ${{github.workspace}}/reports/cppcheck-sonarqube-report.json

    - name: Application Tests ctest
      working-directory: ${{github.workspace}}/bin
      run: ctest

    - name: gcov after unit tests
      working-directory: ${{github.workspace}}/bin/CMakeFiles/cpp-coso.dir/src
      run: find -name '*.gcda' | xargs gcov;

    - name: Setup sonarqube
      uses: warchant/setup-sonar-scanner@v3

    - name: Run SonarQube
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: sonar-scanner
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        -Dsonar.host.url=https://sonarcloud.io/
        -Dsonar.verbose=false

    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

 build-release-Linux:
    needs: [sonarcloud-analyse]
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}

    - name: Generate Target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Package Application
      working-directory: ${{github.workspace}}/bin
      run: cpack -G "ZIP;DEB"

    - name: Archive Application ZIP
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.zip
        path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.zip

    - name: Archive Application DEB
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.deb
        path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.deb

 install-Linux:
    needs: [build-release-Linux]
    runs-on: ubuntu-latest
    steps:

    - uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.deb

    - name: install
      run: sudo dpkg -i ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.deb

    - name: display installation tree
      run: tree /usr/${{env.APPLICATION_NAME}}

    - name: wget
      uses: wei/wget@v1
      with:
        args: -O example.xml https://mguillaumef.github.io/cpp-coso/test/resources/example.xml

    - name: run convert
      run: /usr/cpp-coso/cpp-coso cppcheck ./example.xml ./example.json

    - name: display result
      run: cat ./example.json

 build-debug-Windows:
    env:
      BUILD_TYPE: Debug
    runs-on: windows-latest
    steps:

    - uses: actions/checkout@v2

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/reports; 

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}
        platform_version: 2019
        boost_install_dir: 'D:/'

    - name: Generate target 
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application windows
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin --config Debug

    - name: Unit Tests
      run: ctest
 build-release-Windows:
    needs: [build-debug-Windows]
    runs-on: windows-latest
    steps:

    - uses: actions/checkout@v2

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}
        platform_version: 2019
        boost_install_dir: 'D:/'

    - name: Generate Target 
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application Windows
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin --config ${{env.BUILD_TYPE}}

    - name: Package Application
      working-directory: ${{github.workspace}}/bin
      run: cpack -G "ZIP;NSIS64"

    - name: Archive Application windows ZIP
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.zip
        path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.zip

    - name: Archive Application windows NSIS 64
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.exe
        path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.exe
  
 install-Windows:
    needs: [build-release-Windows]
    runs-on: windows-latest
    steps:

    - uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.exe

    - name: install
      run: cmd /C "${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.exe /S"

    - name: run
      run: '"C:\program files\cpp-coso\cpp-coso"'

 build-debug-MacOSX:
    env:
      BUILD_TYPE: Debug
    runs-on: macos-11
    steps:

    - uses: actions/checkout@v2

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/reports; 

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}

    - name: Generate Target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Application Tests ctest
      working-directory: ${{github.workspace}}/bin
      run: ctest

 build-release-MacOSX:
    needs: [build-debug-MacOSX]
    runs-on: macos-11
    steps:

    - uses: actions/checkout@v2

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}

    - name: Generate Target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Package Application
      working-directory: ${{github.workspace}}/bin
      run: cpack -G "ZIP;DragNDrop"

    - name: Archive Application ZIP
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.zip
        path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.zip

    - name: Archive Application DMG
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.dmg
        path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.dmg

 install-MacOSX:
    needs: [build-debug-MacOSX]
    runs-on: macos-11
    steps:

    - uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.dmg

    - name: attach volume
      run: sudo hdiutil attach ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.dmg

    - name: copy application
      run: sudo cp -R /Volumes/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin/${{env.APPLICATION_NAME}}/${{env.APPLICATION_NAME}} /Applications

    - name: unmount volume
      run: sudo hdiutil unmount /Volumes/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin/

    - name: wget
      run: curl -o example.xml https://mguillaumef.github.io/cpp-coso/test/resources/example.xml

    - name: run convert
      run: /Applications/cpp-coso cppcheck ./example.xml ./example.json

    - name: display result
      run: cat ./example.json

 publish:
    needs: [install-Linux, install-Windows, install-MacOSX]
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: change branch
      run: git checkout delivery

    - name: check version is not duplicated
      run: ([ -d "./delivery/${{env.APPLICATION_VERSION}}" ] && echo "Erro the version ${{env.APPLICATION_VERSION}} already exist in repository" && exit 1)

    - name: Download Linux version DEBIAN
      uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.deb
        path: delivery/${{env.APPLICATION_VERSION}}

    - name: Download Linux version ZIP
      uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.zip
        path: delivery/${{env.APPLICATION_VERSION}}

    - name: Download Windows version NSIS
      uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.exe
        path: delivery/${{env.APPLICATION_VERSION}}
    
    - name: Download Windows version ZIP
      uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.zip
        path: delivery/${{env.APPLICATION_VERSION}}

    - name: Download MacOSX version DragNDrop
      uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.dmg
        path: delivery/${{env.APPLICATION_VERSION}}
    
    - name: Download MacOSX version ZIP
      uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.zip
        path: delivery/${{env.APPLICATION_VERSION}}

    - name: setup git config
      run: |
        git config user.name "MGuillaumeF"
        git config user.email "${{secrets.EMAIL}}"

    - name: index version
      run: git add delivery

    - name: commit version
      run: git commit -m "add v${{env.APPLICATION_VERSION}} package in delivery"
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

    - name: push version
      run: git push
