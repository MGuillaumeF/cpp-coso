name: CPP-COSO - RELEASE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: 
      - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: MinSizeRel
  BOOST_VERSION: 1.78.0
  APPLICATION_VERSION: 0.1.0
  APPLICATION_NAME: cpp-coso

permissions: write-all

jobs:
 build-linux:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}

    - name: Generate Target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Package Application
      working-directory: ${{github.workspace}}/bin
      run: cpack -G "ZIP;DEB"

    - name: Archive Application ZIP
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.zip
        path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.zip

    - name: Archive Application DEB
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.deb
        path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.deb

 install-linux:
    needs: [build-linux]
    runs-on: ubuntu-latest
    steps:

    - uses: actions/download-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.deb

    - name: install
      run: sudo dpkg -i ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Linux.deb

    - name: display installation tree
      run: tree /usr/${{env.APPLICATION_NAME}}

    # - name: try run
    #   working-directory: /usr/${{env.APPLICATION_NAME}}
    #   run: ./${{env.APPLICATION_NAME}}

 build-win:
    runs-on: windows-latest
    steps:

    - uses: actions/checkout@v2

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}
        platform_version: 2019
        boost_install_dir: 'D:/'

    - name: Generate Target 
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application Windows
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin --config MinSizeRel

    - name: Package Application
      working-directory: ${{github.workspace}}/bin
      run: cpack -G ZIP;NSIS --config MinSizeRel

    # - name: Archive Application windows ZIP
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win32.zip
    #     path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win32.exe

    # - name: Archive Application windows NSIS
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.zip
    #     path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-win64.exe

 build-MacOSX:
    runs-on: macos-11
    steps:

    - uses: actions/checkout@v2

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}

    - name: Generate Target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Package Application
      working-directory: ${{github.workspace}}/bin
      run: cpack -G "ZIP"

    - name: Archive Application ZIP
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.zip
        path: ${{github.workspace}}/bin/${{env.APPLICATION_NAME}}-${{env.APPLICATION_VERSION}}-Darwin.zip
