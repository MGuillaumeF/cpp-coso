name: CPP-COSO - DEFAULT

on:
  push:
    branches: [ main ]
  pull_request:
    branches: 
      - main

env:
  BUILD_TYPE: Debug
  BOOST_VERSION: 1.78.0

permissions: write-all

jobs:
 build-linux:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Install dependencies
      run: sudo apt-get update -y && sudo apt-get install -y doxygen graphviz gcovr clang-tidy cppcheck

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/reports; 

    - name: Analyze CPPCheck
      uses: deep5050/cppcheck-action@main
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        force_language: c++
        std: c++20
        output_file: ${{github.workspace}}/reports/cppcheck_report_actions.xml
        other_options: --xml

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}

    - name: Generate Target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Run clang-tidy
      if: github.event_name == 'pull_request'
      uses: ZedThree/clang-tidy-review@v0.7.0
      id: review
      with:
         build_dir: bin

    - name: Archive Application
      uses: actions/upload-artifact@v2
      with:
        name: cpp-coso-Linux
        path: ${{github.workspace}}/bin/cpp-coso

    # - name: Unit Tests Graph
    #   working-directory: ${{github.workspace}}/bin
    #   run: ./cpp-coso --list_content=DOT > ${{github.workspace}}/reports/content.dot 2>&1; dot ${{github.workspace}}/reports/content.dot -Tsvg -o ${{github.workspace}}/reports/content.svg
   
    # - name: Application Tests ctest
    #   working-directory: ${{github.workspace}}/test
    #   run: ctest

    # - name: Generate Unit Tests HTML report
    #   working-directory: ${{github.workspace}}/bin/CMakeFiles/cpp-cosoTest.dir/src
    #   run: gcovr --root ${{github.workspace}}/src --html-details ${{github.workspace}}/reports/CppCosoUnitTestReport.html --html-title "CPP-COSO Coverage report" ${{github.workspace}}/bin/CMakeFiles/cpp-cosoTest.dir/src

    - name: Archive Test report
      uses: actions/upload-artifact@v2
      with:
        name: CPP-COSO-Reports
        path: ${{github.workspace}}/reports

    - name: Doxygen Docs
      run: doxygen docg.conf

    - name: Archive Docs
      uses: actions/upload-artifact@v2
      with:
        name: Docs-CPP-COSO
        path: ${{github.workspace}}/docs

 build-win:
    runs-on: windows-latest
    steps:

    - uses: actions/checkout@v2

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/reports; 

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}
        platform_version: 2019
        boost_install_dir: 'D:/'

    - name: Generate target 
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application windows
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Archive Application windows 
      uses: actions/upload-artifact@v2
      with:
        name: cpp-coso-Win
        path: ${{github.workspace}}/bin/Debug/*.exe

    - name: Unit Tests
      run: ${{github.workspace}}/bin/Debug/cpp-cosoTest.exe --result_code=no --show_progress=yes --log_level=all --log_format=XML --report_level=detailed --report_format=XML --log_sink=${{github.workspace}}/reports/reports.xml --report_sink=${{github.workspace}}/reports/reportUT.xml

    - name: Archive Test report
      uses: actions/upload-artifact@v2
      with:
        name: CPP-COSO Unit Test (win - temp) - Reports
        path: ${{github.workspace}}/reports

 build-MacOSX:
    runs-on: macos-11
    steps:

    - uses: actions/checkout@v2

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/reports; 

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}

    - name: Generate Target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Archive Application
      uses: actions/upload-artifact@v2
      with:
        name: CPP-COSO-MacOSX
        path: ${{github.workspace}}/bin/cpp-coso

    - name: Application Tests ctest
      working-directory: ${{github.workspace}}/bin
      run: ctest

 sonarcloud-analyse:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0

    - name: Install dependencies
      run: sudo apt-get install -y clang-tidy cppcheck

    - name: Create reports directory
      run: mkdir ${{github.workspace}}/reports; 

    - name: Lint Cpp Check
      run: cppcheck --enable=all --inconclusive --language=c++ --std=c++20 --xml --output-file=${{github.workspace}}/reports/cppcheck_report.xml ${{github.workspace}}

    - name: Install boost
      uses: MarkusJx/install-boost@v2.0.0
      id: install-boost
      with:
        boost_version: ${{env.BOOST_VERSION}}

    - name: Generate target
      run: cmake -S ${{github.workspace}} -B ${{github.workspace}}/bin -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc  -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
      env:
        BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}

    - name: Build Application
      working-directory: ${{github.workspace}}
      run: cmake --build ${{github.workspace}}/bin

    - name: Lint Clang-Tidy
      run: clang-tidy -checks='*,-modernize-use-trailing-return-type,-llvm-header-guard,-fuchsia-default-arguments-calls' -header-filter='src/.*' -p bin **/*.*pp > ${{github.workspace}}/reports/clang_tidy_report.txt

    - name: Convert Lint Clang-Tidy to sonarqube format
      working-directory: ${{github.workspace}}/bin
      run: ./cpp-coso clang-tidy ${{github.workspace}}/reports/clang_tidy_report.txt ${{github.workspace}}/reports/clang-tidy-sonarqube-report.json
      
    - name: Convert Lint Cpp Check to sonarqube format
      working-directory: ${{github.workspace}}/bin
      run: ./cpp-coso cppcheck ${{github.workspace}}/reports/cppcheck_report.xml ${{github.workspace}}/reports/cppcheck-sonarqube-report.json

    - name: Application Tests ctest
      working-directory: ${{github.workspace}}/bin
      run: ctest

    - name: gcov after unit tests
      working-directory: ${{github.workspace}}/bin/CMakeFiles/cpp-coso.dir/src
      run: find -name '*.gcda' | xargs gcov;

    - name: Archive Test report
      uses: actions/upload-artifact@v2
      with:
        name: Application - Reports
        path: ${{github.workspace}}/reports

    - name: Setup sonarqube
      uses: warchant/setup-sonar-scanner@v3

    - name: Run SonarQube
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: sonar-scanner
        -Dsonar.login=${{ secrets.SONAR_TOKEN }}
        -Dsonar.host.url=https://sonarcloud.io/
        -Dsonar.verbose=false

    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
